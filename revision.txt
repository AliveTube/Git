=> Basic Commands

`git init`: Initialize a new Git repository in the current directory.

`git clone <repository_url>`: Clone a repository from the specified URL to your local machine.

`git clone –branch <branch_name> <repository_url>`: Clone a specific branch from a repository.

`git add <file>`: Stage changes to be committed.

`git add . or git add –all`: Add all modified and new files to the staging area.

`git commit -m "message"`: Commit the staged changes with a descriptive message.

`git commit -a -m "message" or git commit --all`: Commit all modified and deleted files in the repository without explicitly using git add to stage the changes.

`git restore <file>`: Discard changes in working directory

`git restore --staged <file>`: To unstage

`git status`: Show the working directory status, including staged and unstaged changes.

`git status --ignored`: Display ignored files in addition to the regular status output.

`git log`: Show the commit history.

`git log <branch-d>`: Displays the commit history of the specified branch.

`git log --follow <file>`: Displays the commit history of a file, including its renames.

`git log --all`: Displays the commit history of all branches.

`git diff`: Show the changes between commits, working directory, and staging area.

`git rm <file>`: Remove a file from both the working directory and the repository, staging the deletion.

`git reset <commit>`: Moves the branch pointer to a specified commit, resetting the staging area and the working directory to match the specified commit.

`git reset --soft <commit>`: Moves the branch pointer to a specified commit, preserving the changes in the staging area and the working directory.

`git reset --hard <commit>`: Moves the branch pointer to a specified commit, discarding all changes in the staging area and the working directory, effectively resetting the repository to the specified commit.

======================================================================================================================================================================================================

=> Branching and Merging

`git branch`: List all branches in the repository or create a new branch if a branch name is provided.

`git branch -a`: Lists all local and remote branches.

`git branch -r`: Lists all remote branches.

`git branch <branch-name>`: Creates a new branch with the specified name.

`git branch -d <branch-name>`: Deletes the specified branch.

`git checkout <branch>`: Switch to the specified branch.

`git checkout -b <branch>`: Create a new branch and switch to it.

`git merge <branch>`: Merge the specified branch into the current branch.

======================================================================================================================================================================================================

=> Stash

`git stash`: Stashes the changes in the working directory, allowing you to switch to a different branch or commit without committing the changes.

`git stash list`: Lists all stashes in the repository.

`git stash pop`: Applies and removes the most recent stash from the stash list.

`git stash drop`: Removes the most recent stash from the stash list.

`git stash apply <stash>`: Apply a specific stash without removing it from the stash list.

======================================================================================================================================================================================================

=> Remote Repositories

`git remote add <name> <url>`: Adds a new remote repository with the specified name and URL.

`git remote`: Lists all remote repositories.

`git fetch <remote>`: Retrieves change from the specified remote repository.

`git pull <remote> <branch>`: Fetches changes from the specified remote repository and merges them into the current branch.

`git push`: Pushes local commits to the remote repository.

`git push <remote>`: Pushes local commits to the specified remote repository.

`git push <remote> <branch>`: Pushes local commits to the specified branch of the remote repository.

`git push --all`: Pushes all branches to the remote repository.

=> Comparing and Checking (Later)